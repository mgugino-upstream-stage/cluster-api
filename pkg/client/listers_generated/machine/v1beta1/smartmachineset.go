/*
Copyright 2018 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/openshift/cluster-api/pkg/apis/machine/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SmartMachineSetLister helps list SmartMachineSets.
type SmartMachineSetLister interface {
	// List lists all SmartMachineSets in the indexer.
	List(selector labels.Selector) (ret []*v1beta1.SmartMachineSet, err error)
	// SmartMachineSets returns an object that can list and get SmartMachineSets.
	SmartMachineSets(namespace string) SmartMachineSetNamespaceLister
	SmartMachineSetListerExpansion
}

// smartMachineSetLister implements the SmartMachineSetLister interface.
type smartMachineSetLister struct {
	indexer cache.Indexer
}

// NewSmartMachineSetLister returns a new SmartMachineSetLister.
func NewSmartMachineSetLister(indexer cache.Indexer) SmartMachineSetLister {
	return &smartMachineSetLister{indexer: indexer}
}

// List lists all SmartMachineSets in the indexer.
func (s *smartMachineSetLister) List(selector labels.Selector) (ret []*v1beta1.SmartMachineSet, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.SmartMachineSet))
	})
	return ret, err
}

// SmartMachineSets returns an object that can list and get SmartMachineSets.
func (s *smartMachineSetLister) SmartMachineSets(namespace string) SmartMachineSetNamespaceLister {
	return smartMachineSetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SmartMachineSetNamespaceLister helps list and get SmartMachineSets.
type SmartMachineSetNamespaceLister interface {
	// List lists all SmartMachineSets in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1beta1.SmartMachineSet, err error)
	// Get retrieves the SmartMachineSet from the indexer for a given namespace and name.
	Get(name string) (*v1beta1.SmartMachineSet, error)
	SmartMachineSetNamespaceListerExpansion
}

// smartMachineSetNamespaceLister implements the SmartMachineSetNamespaceLister
// interface.
type smartMachineSetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SmartMachineSets in the indexer for a given namespace.
func (s smartMachineSetNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.SmartMachineSet, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.SmartMachineSet))
	})
	return ret, err
}

// Get retrieves the SmartMachineSet from the indexer for a given namespace and name.
func (s smartMachineSetNamespaceLister) Get(name string) (*v1beta1.SmartMachineSet, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("smartmachineset"), name)
	}
	return obj.(*v1beta1.SmartMachineSet), nil
}
